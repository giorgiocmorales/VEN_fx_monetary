axis.text.y.right  = element_text(colour = scales::alpha("black", 0)),
axis.ticks.y.right = element_line(colour = scales::alpha("black", 0)),
axis.title.y.right = element_text(colour = scales::alpha("black", 0))
)
)
# Lock panels -------
# Export constants
FIG_W_IN  <- 8
FIG_H_IN  <- 6
FIG_DPI   <- 300
PANEL_W_IN <- 6.5
PANEL_H_IN <- PANEL_W_IN/1.56
# Last date ----------
last_date <- max(fx_consolidated$date, na.rm = TRUE)
last_date_label <- format(last_date, "%d-%m-%Y")
# 1 FX time series ---------
fx_1 <-
fx_consolidated %>%
ggplot(aes(x = date)) +
geom_line(aes(y = rate_smc_adj, color = "TC oficial"), linewidth = 1) +
geom_line(aes(y = rate_yad, color = "TC no-oficial"), linewidth = 1) +
scale_color_manual(
values = c("TC oficial" = "#003A5D","TC no-oficial" = "#D70036")) +
scale_y_continuous(
labels = scales::label_number(big.mark = ".", decimal.mark = ","),
limits = c(NA, 300),
breaks = seq(0, 300, 25),
expand = c(0,0),
sec.axis = dup_axis(name = "Eje secundario",
labels = scales::label_number(big.mark = ".", decimal.mark = ","))) +
scale_x_date(
limits = c(ymd("2022-01-01"), NA)) +
labs(
title = "Tipos de cambio en Venezuela",
subtitle = "\u00A0",
caption = paste0("Fuente: BCV; Yadio; Cálculos propios.| Actualizado: ", last_date_label),
y = "VES/USD") +
theme(
axis.title.x = element_blank())
print(fx_1)
fx_1 <- fx_1 + coord_cartesian(clip = "off")
ggsave(
"output/fx_1.jpeg",
plot   = egg::set_panel_size(
fx_1,
width  = grid::unit(PANEL_W_IN, "in"),
height = grid::unit(PANEL_H_IN, "in")
),
width  = FIG_W_IN,
height = FIG_H_IN,
units  = "in",
dpi    = FIG_DPI,
device = ragg::agg_jpeg
)
# 2 FX time series with gap -------
## Last vals, gap and labels
last_vals <- fx_consolidated %>%
filter(!is.na(rate_smc_adj), !is.na(rate_yad)) %>%
filter(date == last_date) %>%
mutate(gap_pct = rate_yad / rate_smc_adj - 1)
## Graph
fx_2 <-
fx_consolidated %>%
ggplot(aes(x = date)) +
geom_line(aes(y = rate_smc_adj, color = "TC oficial"), linewidth = 0.7) +
geom_line(aes(y = rate_yad, color = "TC no-oficial"), linewidth = 0.7) +
scale_color_manual(
values = c("TC oficial" = "#003A5D","TC no-oficial" = "#D70036")) +
scale_y_continuous(
labels = scales::label_number(big.mark = ".", decimal.mark = ","),
limits = c(25, 300),
breaks = scales::breaks_width(25),
expand = c(0,0)) +
scale_x_date(
limits = c(ymd("2024-01-01"), last_date + 15),
breaks = seq(ymd("2024-01-01"), last_date + 15, by = "2 months"),
date_labels = "%b-%y") +
# Last values and gap
geom_text(
data = last_vals,
aes(x = date + 5, y = (rate_smc_adj + rate_yad)/2,
label = percent(gap_pct, accuracy = 0.1, decimal.mark = ",")),
inherit.aes = FALSE, hjust = 0, size = 3.5, family = "Georgia") +
geom_text(
data = last_vals,
aes(x = date + 5, y = rate_smc_adj,
label = number(rate_smc_adj, big.mark=".", decimal.mark=",", accuracy=0.1)),
color = "#003A5D", inherit.aes = FALSE, hjust = 0, size = 3.5, family = "Georgia") +
geom_text(
data = last_vals,
aes(x = date + 5, y = rate_yad,
label = number(rate_yad, big.mark=".", decimal.mark=",", accuracy=0.1)),
color = "#D70036", inherit.aes = FALSE, hjust = 0, size = 3.5, family = "Georgia") +
#Segment
geom_segment(
data = last_vals,
aes(x = date, xend = date,
y = rate_smc_adj + 5, yend = rate_yad - 5),
color = "black", linewidth = 0.5,
arrow = arrow(ends = "both", type = "closed", length = unit(0.025, "inches"))) +
labs(
title = "Tipos de cambio",
subtitle = "\u00A0",
caption = paste0("Fuente: BCV; Yadio; Cálculos propios.| Actualizado: ", last_date_label),
y = "VES/USD") +
theme(
axis.title.x = element_blank())
print(fx_2)
fx_2 <- fx_2 + coord_cartesian(clip = "off")
ggsave(
"output/fx_2.jpeg",
plot   = egg::set_panel_size(
fx_2,
width  = grid::unit(PANEL_W_IN, "in"),
height = grid::unit(PANEL_H_IN, "in")
),
width  = FIG_W_IN,
height = FIG_H_IN,
units  = "in",
dpi    = FIG_DPI,
device = ragg::agg_jpeg
)
# Export constants
FIG_W_IN  <- 8
FIG_H_IN  <- 6
FIG_DPI   <- 300
PANEL_W_IN <- 6.5
PANEL_H_IN <- PANEL_W_IN/1.56
# Last date ----------
last_date <- max(fx_consolidated$date, na.rm = TRUE)
last_date_label <- format(last_date, "%d-%m-%Y")
# 1 FX time series ---------
fx_1 <-
fx_consolidated %>%
ggplot(aes(x = date)) +
geom_line(aes(y = rate_smc_adj, color = "TC oficial"), linewidth = 1) +
geom_line(aes(y = rate_yad, color = "TC no-oficial"), linewidth = 1) +
scale_color_manual(
values = c("TC oficial" = "#003A5D","TC no-oficial" = "#D70036")) +
scale_y_continuous(
labels = scales::label_number(big.mark = ".", decimal.mark = ","),
limits = c(NA, 300),
breaks = seq(0, 300, 25),
expand = c(0,0),
sec.axis = dup_axis(
name   = waiver(),
labels = scales::label_number(big.mark=".", decimal.mark=","))) +
scale_x_date(
limits = c(ymd("2022-01-01"), NA)) +
labs(
title = "Tipos de cambio en Venezuela",
subtitle = "\u00A0",
caption = paste0("Fuente: BCV; Yadio; Cálculos propios.| Actualizado: ", last_date_label),
y = "VES/USD") +
theme(
axis.title.x = element_blank())
print(fx_1)
fx_1 <- fx_1 + coord_cartesian(clip = "off")
ggsave(
"output/fx_1.jpeg",
plot   = egg::set_panel_size(
fx_1,
width  = grid::unit(PANEL_W_IN, "in"),
height = grid::unit(PANEL_H_IN, "in")
),
width  = FIG_W_IN,
height = FIG_H_IN,
units  = "in",
dpi    = FIG_DPI,
device = ragg::agg_jpeg
)
# 2 FX time series with gap -------
## Last vals, gap and labels
last_vals <- fx_consolidated %>%
filter(!is.na(rate_smc_adj), !is.na(rate_yad)) %>%
filter(date == last_date) %>%
mutate(gap_pct = rate_yad / rate_smc_adj - 1)
## Graph
fx_2 <-
fx_consolidated %>%
ggplot(aes(x = date)) +
geom_line(aes(y = rate_smc_adj, color = "TC oficial"), linewidth = 0.7) +
geom_line(aes(y = rate_yad, color = "TC no-oficial"), linewidth = 0.7) +
scale_color_manual(
values = c("TC oficial" = "#003A5D","TC no-oficial" = "#D70036")) +
scale_y_continuous(
labels = scales::label_number(big.mark = ".", decimal.mark = ","),
limits = c(25, 300),
breaks = scales::breaks_width(25),
expand = c(0,0),
sec.axis = dup_axis(
name   = waiver(),
labels = scales::label_number(big.mark=".", decimal.mark=",")))) +
# 1 FX time series ---------
fx_1 <-
fx_consolidated %>%
ggplot(aes(x = date)) +
geom_line(aes(y = rate_smc_adj, color = "TC oficial"), linewidth = 1) +
geom_line(aes(y = rate_yad, color = "TC no-oficial"), linewidth = 1) +
scale_color_manual(
values = c("TC oficial" = "#003A5D","TC no-oficial" = "#D70036")) +
scale_y_continuous(
labels = scales::label_number(big.mark = ".", decimal.mark = ","),
limits = c(NA, 300),
breaks = seq(0, 300, 25),
expand = c(0,0),
sec.axis = dup_axis(
name   = waiver(),
labels = scales::label_number(big.mark=".", decimal.mark=","))) +
scale_x_date(
limits = c(ymd("2022-01-01"), NA)) +
labs(
title = "Tipos de cambio en Venezuela",
subtitle = "\u00A0",
caption = paste0("Fuente: BCV; Yadio; Cálculos propios.| Actualizado: ", last_date_label),
y = "VES/USD") +
theme(
axis.title.x = element_blank())
print(fx_1)
fx_1 <- fx_1 + coord_cartesian(clip = "off")
ggsave(
"output/fx_1.jpeg",
plot   = egg::set_panel_size(
fx_1,
width  = grid::unit(PANEL_W_IN, "in"),
height = grid::unit(PANEL_H_IN, "in")
),
width  = FIG_W_IN,
height = FIG_H_IN,
units  = "in",
dpi    = FIG_DPI,
device = ragg::agg_jpeg
)
# 2 FX time series with gap -------
## Last vals, gap and labels
last_vals <- fx_consolidated %>%
filter(!is.na(rate_smc_adj), !is.na(rate_yad)) %>%
filter(date == last_date) %>%
mutate(gap_pct = rate_yad / rate_smc_adj - 1)
## Graph
fx_2 <-
fx_consolidated %>%
ggplot(aes(x = date)) +
geom_line(aes(y = rate_smc_adj, color = "TC oficial"), linewidth = 0.7) +
geom_line(aes(y = rate_yad, color = "TC no-oficial"), linewidth = 0.7) +
scale_color_manual(
values = c("TC oficial" = "#003A5D","TC no-oficial" = "#D70036")) +
scale_y_continuous(
labels = scales::label_number(big.mark = ".", decimal.mark = ","),
limits = c(25, 300),
breaks = scales::breaks_width(25),
expand = c(0,0),
sec.axis = dup_axis(
name   = waiver(),
labels = scales::label_number(big.mark=".", decimal.mark=","))) +
scale_x_date(
limits = c(ymd("2024-01-01"), last_date + 15),
breaks = seq(ymd("2024-01-01"), last_date + 15, by = "2 months"),
date_labels = "%b-%y") +
# Last values and gap
geom_text(
data = last_vals,
aes(x = date + 5, y = (rate_smc_adj + rate_yad)/2,
label = percent(gap_pct, accuracy = 0.1, decimal.mark = ",")),
inherit.aes = FALSE, hjust = 0, size = 3.5, family = "Georgia") +
geom_text(
data = last_vals,
aes(x = date + 5, y = rate_smc_adj,
label = number(rate_smc_adj, big.mark=".", decimal.mark=",", accuracy=0.1)),
color = "#003A5D", inherit.aes = FALSE, hjust = 0, size = 3.5, family = "Georgia") +
geom_text(
data = last_vals,
aes(x = date + 5, y = rate_yad,
label = number(rate_yad, big.mark=".", decimal.mark=",", accuracy=0.1)),
color = "#D70036", inherit.aes = FALSE, hjust = 0, size = 3.5, family = "Georgia") +
#Segment
geom_segment(
data = last_vals,
aes(x = date, xend = date,
y = rate_smc_adj + 5, yend = rate_yad - 5),
color = "black", linewidth = 0.5,
arrow = arrow(ends = "both", type = "closed", length = unit(0.025, "inches"))) +
labs(
title = "Tipos de cambio",
subtitle = "\u00A0",
caption = paste0("Fuente: BCV; Yadio; Cálculos propios.| Actualizado: ", last_date_label),
y = "VES/USD") +
theme(
axis.title.x = element_blank())
print(fx_2)
fx_2 <- fx_2 + coord_cartesian(clip = "off")
ggsave(
"output/fx_2.jpeg",
plot   = egg::set_panel_size(
fx_2,
width  = grid::unit(PANEL_W_IN, "in"),
height = grid::unit(PANEL_H_IN, "in")
),
width  = FIG_W_IN,
height = FIG_H_IN,
units  = "in",
dpi    = FIG_DPI,
device = ragg::agg_jpeg
)
# Extract VES/USD data from BCV (TC Referencia del Sistema Mercado Cambiario)
# Load packages
library(tidyverse)
library(readxl)
library(lubridate)
library(openxlsx)
library(glue)
# Helper functions ------
# Download to data/raw/
download_bcv_file <- function(url) {
file_name <- basename(url)
dest_path <- file.path("data/raw", file_name)
download.file(url, destfile = dest_path, mode = "wb", quiet = TRUE)
return(dest_path)
}
# Extract USD row from a single sheet
extract_usd_from_sheet <- function(sheet, file_path) {
df <- read_excel(file_path, sheet = sheet, range = "B1:G100", col_names = FALSE)
col_1 <- df$`...1`
col_3 <- df$`...3`
fecha_operacion_raw <- col_1[grepl("fecha operaci[oó]n", col_1, ignore.case = TRUE)][1]
fecha_valor_raw     <- col_3[grepl("fecha valor", col_3, ignore.case = TRUE)][1]
fecha_operacion <- str_extract(fecha_operacion_raw, "\\d{2}/\\d{2}/\\d{4}") %>% dmy()
fecha_valor     <- str_extract(fecha_valor_raw,     "\\d{2}/\\d{2}/\\d{4}") %>% dmy()
usd_row <- which(trimws(df$`...1`) == "USD")
if (length(usd_row) == 0) return(NULL)
bid <- as.numeric(df$`...5`[usd_row[1]])
ask <- as.numeric(df$`...6`[usd_row[1]])
tibble(
sheet_id = sheet,
currency = "USD",
fecha_operacion = fecha_operacion,
fecha_valor = fecha_valor,
usd_bid = bid,
usd_ask = ask
)
}
# Extract all sheets
extract_usd_from_file <- function(file_path) {
sheets <- excel_sheets(file_path)
map_dfr(sheets, extract_usd_from_sheet, file_path = file_path)
}
# Process one BCV file: download → extract → delete
process_bcv_file <- function(url, database_id) {
file_path <- tryCatch(
{
download_bcv_file(url)
},
error = function(e) {
message(glue("Download failed: {basename(url)} — skipping"))
return(NULL)
}
)
if (is.null(file_path)) return(NULL)
result <- tryCatch(
extract_usd_from_file(file_path),
error = function(e) {
message(glue("XLS parse failed: {basename(file_path)} — check manually"))
file.copy(file_path, file.path("data/manual_fix", basename(file_path)), overwrite = TRUE)
return(NULL)
}
)
if (!is.null(result)) {
result$database_id <- database_id
}
unlink(file_path)
return(result)
}
# Update current (incomplete) quarter -------------
# Load csv
ves_fx_bcv <- read_csv("data/output/ves_usd_fx_smc.csv")
url <- "https://www.bcv.org.ve/sites/default/files/EstadisticasGeneral/2_1_2c25_smc.xls"
database_id <- "2025Q3"
# Process fresh data
usd_data <- process_bcv_file(url, database_id)
# Overwrite: drop old 2025Q3 rows and append new ones
ves_fx_bcv <- ves_fx_bcv %>%
filter(database_id != !!database_id) %>%
bind_rows(usd_data) %>%
arrange(fecha_valor)
# Save -------------
write_csv(ves_fx_bcv, "data/output/ves_usd_fx_smc.csv")
# Clean Up -------
rm(usd_data, ves_fx_bcv, database_id, url, download_bcv_file, extract_usd_from_file, extract_usd_from_sheet, process_bcv_file)
# Extract VES/USD data from BCV (Indice de inversion)
# Load packages ----------
library(rvest)
library(tidyverse)
library(lubridate)
library(purrr)
library(glue)
#Functions ----------------
# Scrapes a single page from BCV's investment index site ---------------
scrape_bcv_fx_page <- function(page_number) {
# Construct full URL for the page
url <- glue("https://www.bcv.org.ve/estadisticas/indice-de-inversion?page={page_number}")
# Read and parse the table from the page
raw_table <- read_html(url) %>%
html_element("table") %>%
html_table()
# Clean and convert relevant columns
clean_table <- raw_table %>%
select(fecha = 1, tasa = 2) %>%
mutate(
fecha = lubridate::dmy(fecha),
tasa = str_replace_all(tasa, "\\.", "") %>%
str_replace(",", ".") %>%
as.numeric()
)
return(clean_table)
}
# Identify max number of pages from BCV website (manual) -----------------
max_page <- 28
# Scrape all pages  -----------
bcv_scraped_data <- map_dfr(0:max_page, function(i) {
message(glue("Scraping page {i + 1} of {max_page + 1}"))
scrape_bcv_fx_page(i)
})
# Remove duplicates, just in case -----------
bcv_scraped_data <- bcv_scraped_data %>%
distinct(fecha, .keep_all = TRUE) %>%  # Drop any repeated dates
arrange(fecha)                         # Sort chronologically
# Save -------------
write_csv(bcv_scraped_data, "data/output/ves_usd_fx_indx.csv")
# clean Up -------
rm(bcv_scraped_data, max_page, scrape_bcv_fx_page)
# Extract VES/USD data from Yadio API
# Load packages
library(httr)
library(jsonlite)
library(tidyverse)
library(lubridate)
# Fetch url ------
url_hist <- "https://web2.xekura.io/json/VES/hist.json"
resp <- GET(url_hist)
# Get raw text ------
raw_text <- content(resp, "text", encoding = "UTF-8")
data_list <- fromJSON(raw_text)
#Check structure -------
str(data_list)
#Clean ------
ves_hist_clean <- data_list %>%
mutate(date = mdy(date), implicit_rate = avg24h/usdbtc) %>%
arrange(date) %>%
select(date, rate, implicit_rate, avg24h, usdbtc) %>%
arrange(date)
# Save ------
write_csv(ves_hist_clean, "data/output/ves_usd_fx_yad.csv")
#Clean up -----
rm(data_list, resp, ves_hist_clean, raw_text, url_hist)
# Consolidate FX data
#Load packages ------------
library(tidyverse)
library(lubridate)
# Load data ----------
bcv_fx_smc <- read_csv("data/output/ves_usd_fx_smc.csv",
col_types = cols(
fecha_valor = col_date(),
usd_bid = col_double(),
usd_ask = col_double(),
database_id = col_character()
))
bcv_fx_indx <- read_csv("data/output/ves_usd_fx_indx.csv",
col_types = cols(
fecha = col_date(),
tasa = col_double()
))
ves_fx_yad <- read_csv("data/output/ves_usd_fx_yad.csv",
col_types = cols(
date = col_date(),
rate = col_double(),
implicit_rate = col_double(),
avg24h = col_double(),
usdbtc = col_double()
))
# Clean data ------------
bcv_fx_smc <- bcv_fx_smc %>%
rename(date = fecha_valor, rate_smc = usd_ask) %>%
select(date, rate_smc)
bcv_fx_indx <- bcv_fx_indx %>%
rename(date = fecha, rate_indx = tasa) %>%
select(date, rate_indx)
ves_fx_yad <- ves_fx_yad %>%
rename(date = date, rate_yad = implicit_rate) %>%
select(date, rate_yad)
# Set combination date range -------------
min_date <- min(bcv_fx_smc$date, bcv_fx_indx$date, ves_fx_yad$date, na.rm = TRUE)
max_date <- max(bcv_fx_smc$date, bcv_fx_indx$date, ves_fx_yad$date, na.rm = TRUE)
full_date_range <- tibble(date = seq.Date(from = min_date, to = max_date, by = "day"))
# Combine data -------------
fx_combined <- full_join(full_date_range, bcv_fx_smc, by = "date") %>%
full_join(bcv_fx_indx, by = "date") %>%
full_join(ves_fx_yad, by = "date")
# Fill NAs down -------------
fx_combined <- fx_combined %>%
arrange(date) %>%
fill(rate_smc, rate_indx, rate_yad)
# Correct for currency reconversions -------------
fx_combined <- fx_combined %>%
mutate(rate_smc_adj = rate_smc,
rate_smc_adj = if_else(date <= as.Date("2021-10-03"), rate_smc_adj / 1000000, rate_smc_adj)) %>%
mutate(rate_indx_adj = rate_indx,
rate_indx_adj = if_else(date <= as.Date("2021-10-03"), rate_indx_adj / 1000000, rate_indx_adj)) %>%
select(date, rate_smc, rate_smc_adj, rate_indx, rate_indx_adj, rate_yad)
# Save ----------------
write_csv(fx_combined, "data/output/ves_usd_fx_consolidated.csv")
# Clean up
rm(bcv_fx_indx, bcv_fx_smc, ves_fx_yad, full_date_range, fx_combined)
